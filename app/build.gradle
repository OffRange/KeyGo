plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
}

android {
    compileSdk 34

    def versionPropsFile = file("version.properties")
    def build, major, minor, patch, vCode, vName
    Properties properties = new Properties()

    if (!versionPropsFile.exists()) {
        properties.setProperty("build", "0") // alpha 0-31 | beta 32-63 | rc 64-95 | stable 96-99
        properties.setProperty("major", "1")
        properties.setProperty("minor", "0")
        properties.setProperty("patch", "0")
        properties.store(versionPropsFile.newWriter(), "build: alpha 0-31 | beta 32-63 | rc 64-95 | stable 96-99")
    }

    properties.load(versionPropsFile.newInputStream())
    build = properties.getProperty("build").toInteger()
    major = properties.getProperty("major").toInteger()
    minor = properties.getProperty("minor").toInteger()
    patch = properties.getProperty("patch").toInteger()

    vName = "${major}.${minor}.${patch}"

    def suffixBuild = String.format("%02d", (build % 32) + 1)

    switch (build / 32) {
        case 3: // build >= 96
            break // No suffix for release versions
        case 2: // build >= 64
            vName += "-rc${suffixBuild}"
            break
        case 1: // build >= 32
            vName += "-beta${suffixBuild}"
            break
        default:
            vName += "-alpha${suffixBuild}"
            break
    }
    def runTasks = gradle.startParameter.taskNames
    def isDebugBuild = runTasks.any { taskName -> taskName.contains("assembleDebug") }
    // xxyyyzzbb
    vCode = isDebugBuild ? 10 : major * 10_000_000 + minor * 10_000 + patch * 100 + build

    defaultConfig {
        applicationId "de.davis.passwordmanager"
        minSdk 23
        targetSdk 34
        versionCode vCode
        versionName vName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                compilerArgumentProviders(
                        new RoomSchemaArgProvider(new File(projectDir, "schemas"))
                )
            }
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled true
        }

        debug {
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions = ["market"]
    productFlavors {
        playstore {
            dimension "market"

        }

        github {
            dimension "market"
            versionNameSuffix "-github"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'de.davis.passwordmanager'
}

dependencies {

    //https://stackoverflow.com/a/75298544/14152955
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.autofill:autofill:1.1.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.7.6'
    implementation 'androidx.navigation:navigation-ui:2.7.6'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.browser:browser:1.7.0'
    implementation 'me.gosimple:nbvcxz:1.5.1'
    implementation 'at.favre.lib:bcrypt:0.10.2'
    implementation 'com.github.alvinhkh:TextDrawable:558677ea31'
    implementation 'com.github.devnied.emvnfccard:library:3.0.1'
    implementation 'net.grey-panther:natural-comparator:1.1'

    githubImplementation "com.squareup.retrofit2:retrofit:2.9.0"
    githubImplementation 'org.kohsuke:github-api:1.314'

    implementation "androidx.room:room-runtime:2.6.1"
    annotationProcessor "androidx.room:room-compiler:2.6.1"
    implementation "androidx.room:room-rxjava3:2.6.1"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
        schemaDir.mkdirs()
    }

    @Override
    Iterable<String> asArguments() {
        // Note: If you're using KSP, change the line below to return
        // ["room.schemaLocation=${schemaDir.path}"].
        return ["-Aroom.schemaLocation=${schemaDir.path}"]
    }
}
plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
}

android {
    compileSdk 33

    def versionPropsFile = file("version.properties")
    def versionMayor, versionMinor, versionPatch, versionBuild, versionCodeProp
    Properties versionProps = new Properties()

    if (!versionPropsFile.exists()) {
        versionProps["VERSION_MAYOR"] = "1"
        versionProps["VERSION_MINOR"] = "0"
        versionProps["VERSION_PATCH"] = "0"
        versionProps["VERSION_BUILD"] = "0"
        versionProps["VERSION_CODE"] = "1"
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    def runTasks = gradle.startParameter.taskNames

    def isBuild = runTasks.any { it.startsWith(":app:assemble")}
    def isDebugBuild = runTasks.any { taskName -> taskName.contains("assembleDebug") }

    if (versionPropsFile.canRead() && (isBuild || isDebugBuild)) {
        versionProps.load(versionPropsFile.newDataInputStream())
        versionMayor = versionProps['VERSION_MAYOR'].toInteger()
        versionMinor = versionProps['VERSION_MINOR'].toInteger()
        versionPatch = versionProps['VERSION_PATCH'].toInteger()
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
        versionCodeProp = versionProps['VERSION_CODE'].toInteger()

        if (isDebugBuild) {
           versionBuild += 1
        } else {
            versionCodeProp += 1
        }

        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_CODE'] = versionCodeProp.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    defaultConfig {
        applicationId "de.davis.passwordmanager"
        minSdk 23
        targetSdk 33
        versionCode versionCodeProp
        versionName "v${versionMayor}.${versionMinor}.${versionPatch} ${versionBuild}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                compilerArgumentProviders(
                        new RoomSchemaArgProvider(new File(projectDir, "schemas"))
                )
            }
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled true
        }

        debug{
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
        }

        rc{
            initWith release
            versionNameSuffix "-rc"
        }

        beta{
            initWith release
            versionNameSuffix "-beta"
        }

        alpha{
            initWith release
            versionNameSuffix "-alpha"
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
    }
    namespace 'de.davis.passwordmanager'
}

dependencies {

    //https://stackoverflow.com/a/75298544/14152955
    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.autofill:autofill:1.1.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.6.0'
    implementation 'androidx.navigation:navigation-ui:2.6.0'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.biometric:biometric:1.1.0'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'me.gosimple:nbvcxz:1.5.1'
    implementation 'at.favre.lib:bcrypt:0.10.2'
    implementation 'com.github.alvinhkh:TextDrawable:558677ea31'
    implementation 'com.github.devnied.emvnfccard:library:3.0.1'
    implementation 'net.grey-panther:natural-comparator:1.1'

    implementation "androidx.room:room-runtime:2.5.1"
    annotationProcessor "androidx.room:room-compiler:2.5.1"
    implementation "androidx.room:room-rxjava3:2.5.1"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation "org.slf4j:slf4j-simple:2.0.7"
    implementation 'org.kohsuke:github-api:1.314'
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
        schemaDir.mkdirs()
    }

    @Override
    Iterable<String> asArguments() {
        // Note: If you're using KSP, change the line below to return
        // ["room.schemaLocation=${schemaDir.path}"].
        return ["-Aroom.schemaLocation=${schemaDir.path}"]
    }
}